using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp53
{

    public class ShowMoney
    {
        private short i=0;
        private StringBuilder sb = new StringBuilder();
        private int k;
        public string Convr(string gr)      // conversion gr->zł
        {
            k = 0;
            if (gr.Length == 0) { return "Correct the mistakes!"; }
            else if (gr.Length < 2) { sb.Append("0"); sb.Append(","); sb.Append("0"); sb.Append(gr[0]); }
            else if (gr.Length < 3) { sb.Append("0"); sb.Append(","); sb.Append(gr[0]); sb.Append(gr[1]); }
            else if (gr.Length < 4) { sb.Append(gr[0]); sb.Append(","); sb.Append(gr[1]); sb.Append(gr[2]); }
            else if (gr.Length < 5) { sb.Append(gr[0]); sb.Append(gr[1]); sb.Append(","); sb.Append(gr[2]); sb.Append(gr[3]); }
            else if ((gr.Length - 2) % 3 == 0)
            {
                for (int i = 1; i < ((gr.Length - 2) / 3); i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        sb.Append(gr[k]);
                        k++;
                    }
                    sb.Append(" ");
                }
                for (int j = 0; j < 3; j++)
                {
                    sb.Append(gr[k]);
                    k++;
                }
                sb.Append(","); sb.Append(gr[gr.Length - 2]); sb.Append(gr[gr.Length - 1]);
            }
            else if ((gr.Length - 2) % 3 == 1)
            {
                k++;
                sb.Append(gr[0]); sb.Append(" ");
                for (int i = 1; i < (gr.Length - 3) / 3; i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        sb.Append(gr[k]);
                        k++;
                    }
                    sb.Append(" ");
                }
                for (int j = 0; j < 3; j++)
                {
                    sb.Append(gr[k]);
                    k++;
                }
                sb.Append(","); sb.Append(gr[gr.Length - 2]); sb.Append(gr[gr.Length - 1]);
            }
            else if ((gr.Length - 2) % 3 == 2)
            {
                k += 2;
                sb.Append(gr[0]); sb.Append(gr[1]); sb.Append(" ");
                for (int i = 1; i < (gr.Length - 4) / 3; i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        sb.Append(gr[k]);
                        k++;
                    }
                    sb.Append(" ");
                }
                for (int j = 0; j < 3; j++)
                {
                    sb.Append(gr[k]);
                    k++;
                }
                sb.Append(","); sb.Append(gr[gr.Length - 2]); sb.Append(gr[gr.Length - 1]);
            }


            string _zl = sb.ToString() + " zł";
            return _zl;
        }
        //-----------------------------SHOW_MONEY_WORD
        public string MAINShowMoneyWord(string _gr)
        {
            string _zl = Convr2(_gr) + " \n";
             char a, b; a = ' '; b = ',';
            int cLen;       //length c in foreach
            string str = sb.ToString();
            var tab = str.Split(a, b);
            sb.Clear();
            List<string> tab_sl = new List<string>();
            foreach (string c in tab)
            {
                cLen = c.Length;
                SwitchMain(tab_sl, c, cLen);
                tab_sl.Add(sb.ToString()); sb.Clear();
            }
            int k = 0;      //num for for            
            for (int countTab = tab.Length; countTab > 0; countTab--) { addValue(countTab, tab, k, tab_sl); k++; }
            sb.Append(_gr+" gr  ->  "); sb.Append(_zl);     //gr->zł in console  //can del.
            foreach (string words in tab_sl) sb.Append(words);
            return sb.ToString();
        }
        //----------------------------------------------  
        private void SwitchMain(List<string> tab_sl, string c, int cLean)
        {                            
            switch (cLean)
            {
                case 1:
                    { sb.Append(Unt(c[i])); }
                    break;
                case 2:
                    if (c == "10") { sb.Append("dziesięć "); }
                    else if (c[i] == '1') { sb.Append(UntFT(c[(i + 1)])); }
                    else { sb.Append(UntFTS(c[i++])); sb.Append(Unt(c[i])); }
                    break;
                case 3:
                    { sb.Append(UntFH(c[i++])); SwitchMain(tab_sl, c, (cLean - 1)); }
                    break;
            }
            i = 0;
        }

        ////------------------------------------
        private string Unt(char t)     //number of unities       //liczba jedności
        {
            switch (t)
            {
                case '1':
                    return "jeden ";
                case '2':
                    return "dwa ";
                case '3':
                    return "trzy ";
                case '4':
                    return "cztery ";
                case '5':
                    return "pięć ";
                case '6':
                    return "sześć ";
                case '7':
                    return "siedem ";
                case '8':
                    return "osiem ";
                case '9':
                    return "dziewięć ";
                default:
                    return "";
            }
        }
        private string UntFT(char t)     //unt_for_ten
        {
            switch (t)
            {
                case '1':
                    return "jedenaście ";
                case '2':
                    return "dwanaście ";
                case '3':
                    return "trzynaście ";
                case '4':
                    return "czternaście ";
                case '5':
                    return "piętnaście ";
                case '6':
                    return "szesnaście ";
                case '7':
                    return "siedemnaście ";
                case '8':
                    return "osiemnaście ";
                case '9':
                    return "dziewiętnaście ";
                default:
                    return "";                    
            }
        }
        private string UntFTS(char t)     //unt_for_tens
        {
            switch (t)
            {          
                case '2':
                    return "dwadzieścia ";
                case '3':
                    return "trzydzieści ";
                case '4':
                    return "czterdzieści ";
                case '5':
                    return "pięćdziesiąt ";
                case '6':
                    return "sześćdziesiąt ";
                case '7':
                    return "siedemdziesiąt ";
                case '8':
                    return "osiemdziesiąt ";
                case '9':
                    return "dziewięćdziesiąt ";
                default:
                    return "";
            }
        }
        public string UntFH(char t)     //unt_for_hundret
        {
            switch (t)
            {
                case '1':
                    return "sto ";
                case '2':
                    return "dwieście ";
                case '3':
                    return "trzysta ";
                case '4':
                    return "czterysta ";
                case '5':
                    return "pięćset ";
                case '6':
                    return "sześćset ";
                case '7':
                    return "siedemset ";
                case '8':
                    return "osiemset ";
                case '9':
                    return "dziewięćset ";
                default:
                    return "";
            }
        }
        private void addValue(int countTab, string[] tab, int k, List<string> tab_sl)       //tysiące, miliony itd. ... ( jeżeli długosc tablicy=3 to tysiące, =4 to miliony itd..)
        {
            int num = 0;
            if (tab[k].Length == 1) num = (int)Char.GetNumericValue((tab[k][0]));
            else if (tab[k].Length == 2) num = (int)Char.GetNumericValue((tab[k][1]));
            else num = (int)Char.GetNumericValue((tab[k][2]));
            if (tab[k] != "000")
            {
                switch (countTab)
                {
                    case 1:
                        if (tab[k] == "00") tab_sl[k] += "zero groszy";
                        else if (tab[k] == "01") tab_sl[k] += "grosz";
                        else if (num > 1 && num < 5 && tab[k][0]!='1') tab_sl[k] += "grosze";
                        else tab_sl[k] += "groszy";
                        break;
                    case 2:
                        if (tab[tab.Length - 2] != "0")     //if 0 zł doesn't add "złotych" 
                        {
                            if (tab[k] == "1") tab_sl[k] += "złoty i ";
                            else if (num > 1 && num < 5) tab_sl[k] += "złote i ";
                            else tab_sl[k] += "złotych i ";
                        }
                        break;
                    case 3:     //tys
                        if (tab[k] == "1") tab_sl[k] = "tysiąc ";
                        else if (num > 1 && num < 5) tab_sl[k] += "tysiące ";
                        else tab_sl[k] += "tysiący ";
                        break;
                    case 4:     //mln
                        if (tab[k] == "1") tab_sl[k] = "milion ";
                        else if (num > 1 && num < 5) tab_sl[k] += "miliony  ";
                        else tab_sl[k] += "milionów ";
                        break;
                    case 5:     //mld
                        if (tab[k] == "1") tab_sl[k] = "miliard ";
                        else if (num > 1 && num < 5) tab_sl[k] += "miliardy  ";
                        else tab_sl[k] += "miliardów ";
                        break;
                    case 6:     //bln
                        if (tab[k] == "1") tab_sl[k] = "bilion ";
                        else if (num > 1 && num < 5) tab_sl[k] += "biliony  ";
                        else tab_sl[k] += "bilionów ";
                        break;
                    case 7:     //bld
                        if (tab[k] == "1") tab_sl[k] = "biliard ";
                        else if (num > 1 && num < 5) tab_sl[k] += "biliardy  ";
                        else tab_sl[k] += "biliardów ";
                        break;
                    case 8:     //trl
                        if (tab[k] == "1") tab_sl[k] = "trylion ";
                        else if (num > 1 && num < 5) tab_sl[k] += "tryliony  ";
                        else tab_sl[k] += "trylionów ";
                        break;
                    case 9:     //trd
                        if (tab[k] == "1") tab_sl[k] = "tryliard ";
                        else if (num > 1 && num < 5) tab_sl[k] += "tryliardy  ";
                        else tab_sl[k] += "tryliardów ";
                        break;
                    case 10:    //kwl
                        if (tab[k] == "1") tab_sl[k] = "kwadrylion ";
                        else if (num > 1 && num < 5) tab_sl[k] += "kwadryliony  ";
                        else tab_sl[k] += "kwadrylionów ";
                        break;
                }
            }
        }
        
        public string Convr2 (string _gr)     //better Convert
        {
            int modGr = (_gr.Length - 2) % 3;
            int dzielGr = (_gr.Length - 2) / 3;
            int whose = 0;
            for (int i = 0; i < modGr; i++) sb.Append(_gr[i]);
            if (modGr!=0 && _gr.Length>5) sb.Append(" "); 
            for (int k = 0; k < dzielGr; k++)
            {             
                sb.Append(_gr[modGr+whose++]);
                sb.Append(_gr[modGr+whose++]);
                sb.Append(_gr[modGr+whose++]);
                if (k < dzielGr - 1) sb.Append(" ");
            }
            if (_gr.Length == 2) sb.Append("0");
            if (_gr.Length > 1) sb.Append("," + _gr[_gr.Length - 2]); else sb.Append("0,0");        
            sb.Append(_gr[_gr.Length - 1]);

            return sb.ToString()+" zł";
        }

        class Program
        {
            static void Main(string[] args)
            {                        
                ShowMoney show = new ShowMoney();
              //ulong gr= 912345678;        //9 123 456,78 zł
                string _gr = "2122";      //98 123 456,78 zł 
                Console.WriteLine(show.MAINShowMoneyWord(_gr));
             // Console.WriteLine(show.Convr2(_gr));
                Console.ReadKey();
            }

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


        }

    }
}
